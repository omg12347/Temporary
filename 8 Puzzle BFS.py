# -*- coding: utf-8 -*-
"""AI-lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MQpS4NALH6aSQnx7PWkIAPKHSMHLJNry

Roll No.: 66

Name: Atharva Werulkar

Sem: 4th

Batch: E4

Lab-3

Aim:- Solve 8 Puzzle Problem using BFS
"""

from queue import Queue
import numpy as np


goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
moves = {(-1, 0): "UP", (1, 0): "DOWN", (0, -1): "LEFT", (0, 1): "RIGHT"}

def bfs(initial_state):
    frontier = Queue()
    frontier.put((initial_state, None))  # None represents the initial move
    explored = set()
    state_count = 0
    while not frontier.empty():
        state, move = frontier.get()
        state_count += 1

        # print the current state and move
        print("Move:", move)
        print(np.matrix(state))
        print("\n")

        if state == goal_state:
            print("Goal reached after visiting", state_count, "states: ")
            return state

        explored.add(str(state))
        for i in range(3):
            for j in range(3):
                if state[i][j] == 0:
                    for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:
                        if 0 <= x < 3 and 0 <= y < 3:
                            new_state = [row[:] for row in state]
                            new_state[i][j], new_state[x][y] = new_state[x][y], new_state[i][j]
                            if str(new_state) not in explored:
                                # determine the move required to reach the new state
                                new_move = moves[(x-i, y-j)]
                                frontier.put((new_state, new_move))
    print("Goal cannot be reached after visiting", state_count, "states: ")
    return None

# example usage
initial_state =  [[1, 2, 3], [4, 5, 6], [7, 0, 8]]
solution = bfs(initial_state)

print(np.matrix(solution))